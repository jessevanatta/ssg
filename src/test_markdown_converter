import unittest

from textnode import TextNode, TextType
from markdown_converter import split_nodes_delimiter

class TestMarkdownConverter(unittest.TestCase):
    def test_bold_wrap(self):
        node = TextNode("**bold at start** and **bold at end**", TextType.TEXT)
        new_nodes = split_nodes_delimiter([node], "**", TextType.BOLD)
        self.assertEqual(new_nodes, [
            TextNode("bold at start", TextType.BOLD),
            TextNode("and", TextType.TEXT),
            TextNode("bold at end", TextType.BOLD),
        ])
    
    def test_ital_wrap(self):
        node = TextNode("_ital at start_ and _ital at end_", TextType.TEXT)
        new_nodes = split_nodes_delimiter([node], "_", TextType.ITALIC)
        self.assertEqual(new_nodes, [
            TextNode("ital at start", TextType.ITALIC),
            TextNode("and", TextType.TEXT),
            TextNode("ital at end", TextType.ITALIC),
        ])

    def test_code_inline(self):
        node = TextNode("here is some `inline code` for you", TextType.TEXT)
        new_nodes = split_nodes_delimiter([node], "`", TextType.CODE)
        self.assertEqual(new_nodes, [
            TextNode("here is some ", TextType.TEXT),
            TextNode("inline code", TextType.CODE),
            TextNode(" for you", TextType.TEXT),
        ])

    def test_code_block(self):
        node = TextNode("here is my code:\n```def your_mom(joke):\n   return 'is bad'\n``` how is that?", TextType.TEXT)
        new_nodes = split_nodes_delimiter([node], "```", TextType.CODE)
        self.assertEqual(new_nodes, [
            TextNode("here is my code:\n", TextType.TEXT),
            TextNode("def your_mom(joke):\n    return 'is bad'\n", TextType.CODE),
            TextNode("how is that?", TextType.TEXT),
        ])

if __name__ == "__main__":
    unittest.main()
